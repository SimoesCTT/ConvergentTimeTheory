
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA CONVERGE ID LBRACKET LPAREN MINUS NUMBER PLUS RBRACKET RETROCAUSAL_OP RPAREN SEMICOLON TIMELINE TIMESprogram : statement_liststatement_list : statement\n| statement statement_liststatement : timeline_decl\n| retrocausal_constraint\n| assignment\n| converge_statementtimeline_decl : TIMELINE ID ASSIGN expression SEMICOLONretrocausal_constraint : ID RETROCAUSAL_OP expression SEMICOLONassignment : ID ASSIGN expression SEMICOLONconverge_statement : CONVERGE LPAREN ID RPAREN SEMICOLONexpression : NUMBER\n| ID\n| list_expression\n| function_call\n| expression PLUS expression\n| expression MINUS expression\n| expression TIMES expressionfunction_call : CONVERGE LPAREN ID RPARENlist_expression : LBRACKET number_list RBRACKET\n| LBRACKET RBRACKETnumber_list : NUMBER\n| NUMBER COMMA number_list'
    
_lr_action_items = {'TIMELINE':([0,3,4,5,6,7,27,35,37,44,],[8,8,-4,-5,-6,-7,-9,-10,-8,-11,]),'ID':([0,3,4,5,6,7,8,13,14,15,16,27,28,29,30,34,35,37,44,],[9,9,-4,-5,-6,-7,12,17,17,25,17,-9,17,17,17,43,-10,-8,-11,]),'CONVERGE':([0,3,4,5,6,7,13,14,16,27,28,29,30,35,37,44,],[10,10,-4,-5,-6,-7,23,23,23,-9,23,23,23,-10,-8,-11,]),'$end':([1,2,3,4,5,6,7,11,27,35,37,44,],[0,-1,-2,-4,-5,-6,-7,-3,-9,-10,-8,-11,]),'RETROCAUSAL_OP':([9,],[13,]),'ASSIGN':([9,12,],[14,16,]),'LPAREN':([10,23,],[15,34,]),'NUMBER':([13,14,16,22,28,29,30,42,],[19,19,19,33,19,19,19,33,]),'LBRACKET':([13,14,16,28,29,30,],[22,22,22,22,22,22,]),'SEMICOLON':([17,18,19,20,21,24,26,32,36,38,39,40,41,46,],[-13,27,-12,-14,-15,35,37,-21,44,-16,-17,-18,-20,-19,]),'PLUS':([17,18,19,20,21,24,26,32,38,39,40,41,46,],[-13,28,-12,-14,-15,28,28,-21,28,28,28,-20,-19,]),'MINUS':([17,18,19,20,21,24,26,32,38,39,40,41,46,],[-13,29,-12,-14,-15,29,29,-21,29,29,29,-20,-19,]),'TIMES':([17,18,19,20,21,24,26,32,38,39,40,41,46,],[-13,30,-12,-14,-15,30,30,-21,30,30,30,-20,-19,]),'RBRACKET':([22,31,33,45,],[32,41,-22,-23,]),'RPAREN':([25,43,],[36,46,]),'COMMA':([33,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,3,],[2,11,]),'statement':([0,3,],[3,3,]),'timeline_decl':([0,3,],[4,4,]),'retrocausal_constraint':([0,3,],[5,5,]),'assignment':([0,3,],[6,6,]),'converge_statement':([0,3,],[7,7,]),'expression':([13,14,16,28,29,30,],[18,24,26,38,39,40,]),'list_expression':([13,14,16,28,29,30,],[20,20,20,20,20,20,]),'function_call':([13,14,16,28,29,30,],[21,21,21,21,21,21,]),'number_list':([22,42,],[31,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser_implementation.py',105),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser_implementation.py',109),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser_implementation.py',110),
  ('statement -> timeline_decl','statement',1,'p_statement','parser_implementation.py',117),
  ('statement -> retrocausal_constraint','statement',1,'p_statement','parser_implementation.py',118),
  ('statement -> assignment','statement',1,'p_statement','parser_implementation.py',119),
  ('statement -> converge_statement','statement',1,'p_statement','parser_implementation.py',120),
  ('timeline_decl -> TIMELINE ID ASSIGN expression SEMICOLON','timeline_decl',5,'p_timeline_decl','parser_implementation.py',124),
  ('retrocausal_constraint -> ID RETROCAUSAL_OP expression SEMICOLON','retrocausal_constraint',4,'p_retrocausal_constraint','parser_implementation.py',128),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser_implementation.py',132),
  ('converge_statement -> CONVERGE LPAREN ID RPAREN SEMICOLON','converge_statement',5,'p_converge_statement','parser_implementation.py',136),
  ('expression -> NUMBER','expression',1,'p_expression','parser_implementation.py',140),
  ('expression -> ID','expression',1,'p_expression','parser_implementation.py',141),
  ('expression -> list_expression','expression',1,'p_expression','parser_implementation.py',142),
  ('expression -> function_call','expression',1,'p_expression','parser_implementation.py',143),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser_implementation.py',144),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser_implementation.py',145),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser_implementation.py',146),
  ('function_call -> CONVERGE LPAREN ID RPAREN','function_call',4,'p_function_call','parser_implementation.py',153),
  ('list_expression -> LBRACKET number_list RBRACKET','list_expression',3,'p_list_expression','parser_implementation.py',157),
  ('list_expression -> LBRACKET RBRACKET','list_expression',2,'p_list_expression','parser_implementation.py',158),
  ('number_list -> NUMBER','number_list',1,'p_number_list','parser_implementation.py',165),
  ('number_list -> NUMBER COMMA number_list','number_list',3,'p_number_list','parser_implementation.py',166),
]
